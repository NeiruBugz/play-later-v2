generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ----- NextAuth Authorization Models ------
//
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    Game           Game[]
    WishlistedGame WishlistedGame[]
    username       String?
    List           List[]
    Account        Account[]
    Session        Session[]
}

// ----- Application Models ------

model Game {
    id              String        @id @default(cuid())
    title           String
    platform        GamePlatform?
    status          GameStatus    @default(BACKLOG)
    purchaseType    PurchaseType?
    rating          Int?
    review          String?
    isWishlisted    Boolean?      @default(false)
    imageUrl        String
    howLongToBeatId String?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    deletedAt       DateTime?
    gameplayTime    Int?

    userId String
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    listId String?
    List   List?   @relation(fields: [listId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([listId])
}

model WishlistedGame {
    id              String    @id @default(cuid())
    title           String
    userId          String
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    imageUrl        String
    howLongToBeatId String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?

    @@index([userId])
}

model List {
    id        String    @id @default(cuid())
    name      String
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    games     Game[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    @@index([userId])
}

enum GameStatus {
    BACKLOG
    INPROGRESS
    COMPLETED
    ABANDONED
    FULL_COMPLETION
}

enum GamePlatform {
    PC
    XBOX
    NINTENDO
    PLAYSTATION
}

enum PurchaseType {
    PHYSICAL
    DIGITAL
    SUBSCRIPTION
}
