generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ----- NextAuth Authorization Models ------//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  username      String?
  Account       Account[]
  Session       Session[]
  BacklogItem   BacklogItem[]
  Review        Review[]
}

// ----- Application Models ------//
model Game {
  id            String        @id @default(cuid())
  igdbId        Int           @unique
  hltbId        String?       @unique
  title         String
  description   String?
  coverImage    String?
  releaseDate   DateTime?
  mainStory     Int?
  mainExtra     Int?
  completionist Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  backlogItems  BacklogItem[] @relation("GameBacklogItems")
  Review        Review[]
}

model BacklogItem {
  id              Int               @id @default(autoincrement())
  status          BacklogItemStatus @default(TO_PLAY)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  platform        String?
  userId          String
  acquisitionType AcquisitionType   @default(DIGITAL)
  gameId          String
  game            Game              @relation("GameBacklogItems", fields: [gameId], references: [id], onDelete: Cascade)
  User            User              @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(0) // Rating from 0 to 10
  content   String? // Optional review text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  gameId    String
  User      User     @relation(fields: [userId], references: [id])
  Game      Game     @relation(fields: [gameId], references: [id])
}

enum BacklogItemStatus {
  TO_PLAY
  PLAYED
  PLAYING
  COMPLETED
  WISHLIST
}

enum AcquisitionType {
  PHYSICAL
  DIGITAL
  SUBSCRIPTION
}
