generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ----- NextAuth Authorization Models ------
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  Game           Game[]
  WishlistedGame WishlistedGame[]
  username       String?
  List           List[]
  Account        Account[]
  Session        Session[]
  Playthrough    Playthrough[]
  Friend         Friend[]
  Review         Review[]
}

// ----- Application Models ------

model Friend {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

// Game model represents a game that a user has in their collection
model Game {
  id              String        @id @default(cuid())
  title           String
  status          GameStatus?
  purchaseType    PurchaseType?
  rating          Int?
  review          Review[]
  isWishlisted    Boolean?      @default(false)
  imageUrl        String
  howLongToBeatId String?
  igdbId          Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  gameplayTime    Int?
  ownagePlatform  String[]

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId      String?
  List        List?         @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Playthrough Playthrough[]
  reviewId    Int?

  @@index([userId])
  @@index([listId])
}

// Playthrough model represents a playthrough of a game by a user
model Playthrough {
  id       String @id @default(cuid())
  label    String
  platform String

  gameId String
  userId String

  startedAt  DateTime
  finishedAt DateTime?

  createdAt DateTime
  updatedAt DateTime?
  deletedAt DateTime?

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// WishlistedGame model represents a game that a user has wishlisted
model WishlistedGame {
  id              String    @id @default(cuid())
  title           String
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageUrl        String
  howLongToBeatId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  @@index([userId])
}

// List model represents a list of games that a user has
model List {
  id        String    @id @default(cuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  games     Game[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
}

model Review {
  id        Int       @id @unique @default(autoincrement())
  name      String?
  content   String
  author    User      @relation(fields: [userId], references: [id])
  userId    String
  game      Game      @relation(fields: [gameId], references: [id])
  createdAt DateTime
  deletedAt DateTime?
  gameId    String
}

enum GameStatus {
  BACKLOG
  INPROGRESS
  COMPLETED
  ABANDONED
  FULL_COMPLETION
  SHELVED
}

enum PurchaseType {
  PHYSICAL
  DIGITAL
  SUBSCRIPTION
}
