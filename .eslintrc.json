{
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "plugin:boundaries/recommended",
    "plugin:prettier/recommended",
    "plugin:@tanstack/eslint-plugin-query/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript"
  ],
  "plugins": ["boundaries", "import", "@tanstack/query"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "settings": {
    "next": {
      "rootDir": "./"
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      }
    },
    "boundaries/elements": [
      { "type": "app", "pattern": "app/*" },
      { "type": "features", "pattern": "features/*" },
      { "type": "domain", "pattern": "domain/*" },
      { "type": "shared", "pattern": "shared/*" }
    ]
  },
  "rules": {
    // Architectural boundaries
    "boundaries/element-types": [
      "error",
      {
        "default": "disallow",
        "rules": [
          { "from": "app", "allow": ["features", "shared"] },
          { "from": "features", "allow": ["domain", "shared"] },
          { "from": "domain", "allow": ["domain"] },
          { "from": "shared", "allow": ["shared"] }
        ]
      }
    ],

    // .cursor/rules: import-type.md - Prefer top-level import type
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "disallowTypeAnnotations": true,
        "fixStyle": "separate-type-imports"
      }
    ],

    // .cursor/rules: default-exports.md - No default exports except when required by framework
    "import/no-default-export": "error",

    // .cursor/rules: naming-conventions.md - Naming conventions
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"]
      },
      {
        "selector": "class",
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      }
    ],

    // Import organization - handled by prettier-plugin-sort-imports
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",

    // TypeScript specific improvements
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",

    // Disable conflicting rules
    "import/no-unresolved": "off"
  },
  "overrides": [
    {
      "files": [
        "app/**/{page,layout,loading,error,not-found,route}.{ts,tsx}",
        "app/**/default.{ts,tsx}",
        "next.config.{js,mjs,ts}",
        "tailwind.config.{js,ts}",
        "vitest.config.{js,ts}"
      ],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    {
      "files": ["app/api/**/*.ts"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off"
      }
    },
    {
      "files": ["**/*.test.{ts,tsx}", "**/*.spec.{ts,tsx}"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unused-vars": "off"
      }
    },
    {
      "files": ["**/*.{jsx,tsx}"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off"
      }
    }
  ]
}
